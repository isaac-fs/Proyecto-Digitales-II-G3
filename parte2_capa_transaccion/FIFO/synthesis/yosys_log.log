
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Executing script file `synthesis/synth_script.ys' --

1. Executing Verilog-2005 frontend: rtl/FIFO.v
Parsing Verilog input from `rtl/FIFO.v' to AST representation.
Generating RTLIL representation for module `\memoria'.
Generating RTLIL representation for module `\FIFO'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Analyzing design hierarchy..
Top module:  \FIFO
Used module:     \memoria

2.2. Executing AST frontend in derive mode using pre-parsed AST for module `\memoria'.
Parameter \MEM_DEPTH = 8
Parameter \WORD_SIZE = 10
Parameter \PTR_SIZE = 3
Generating RTLIL representation for module `$paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3'.

2.3. Analyzing design hierarchy..
Top module:  \FIFO
Used module:     $paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3

2.4. Analyzing design hierarchy..
Top module:  \FIFO
Used module:     $paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3
Removing unused module `\memoria'.
Removed 1 unused modules.

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$rtl/FIFO.v:139$88 in module FIFO.
Marked 7 switch rules as full_case in process $proc$rtl/FIFO.v:99$70 in module FIFO.
Marked 1 switch rules as full_case in process $proc$rtl/FIFO.v:86$68 in module FIFO.
Marked 1 switch rules as full_case in process $proc$rtl/FIFO.v:69$63 in module FIFO.
Marked 1 switch rules as full_case in process $proc$rtl/FIFO.v:61$60 in module FIFO.
Marked 1 switch rules as full_case in process $proc$rtl/FIFO.v:28$57 in module FIFO.
Marked 2 switch rules as full_case in process $proc$rtl/memoria.v:22$111 in module $paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3.
Removed a total of 0 dead cases.

3.3. Executing PROC_INIT pass (extract init attributes).

3.4. Executing PROC_ARST pass (detect async resets in processes).

3.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\FIFO.$proc$rtl/FIFO.v:149$90'.
     1/1: $0\error_flag[0:0]
Creating decoders for process `\FIFO.$proc$rtl/FIFO.v:139$88'.
     1/2: $0\ff_wr_en[0:0]
     2/2: $0\ff_rd_en[0:0]
Creating decoders for process `\FIFO.$proc$rtl/FIFO.v:99$70'.
     1/14: $3\full_flag[0:0]
     2/14: $3\empty_flag[0:0]
     3/14: $2\full_flag[0:0]
     4/14: $2\empty_flag[0:0]
     5/14: $1\full_flag[0:0]
     6/14: $1\empty_flag[0:0]
     7/14: $2\almost_full_flag[0:0]
     8/14: $2\almost_empty_flag[0:0]
     9/14: $1\almost_full_flag[0:0]
    10/14: $1\almost_empty_flag[0:0]
    11/14: $0\empty_flag[0:0]
    12/14: $0\full_flag[0:0]
    13/14: $0\almost_full_flag[0:0]
    14/14: $0\almost_empty_flag[0:0]
Creating decoders for process `\FIFO.$proc$rtl/FIFO.v:86$68'.
     1/1: $0\ff_N[2:0]
Creating decoders for process `\FIFO.$proc$rtl/FIFO.v:82$66'.
     1/1: $0\N[2:0]
Creating decoders for process `\FIFO.$proc$rtl/FIFO.v:69$63'.
     1/1: $0\rd_ptr[2:0]
Creating decoders for process `\FIFO.$proc$rtl/FIFO.v:61$60'.
     1/1: $0\wr_ptr[2:0]
Creating decoders for process `\FIFO.$proc$rtl/FIFO.v:28$57'.
     1/2: $0\almost_full_threshold[2:0]
     2/2: $0\almost_empty_threshold[2:0]
Creating decoders for process `$paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3.$proc$rtl/memoria.v:22$111'.
     1/31: $1\i[31:0]
     2/31: $0\i[31:0]
     3/31: $0$memwr$\mem$rtl/memoria.v:27$102_EN[9:0]$116
     4/31: $0$memwr$\mem$rtl/memoria.v:27$102_DATA[9:0]$115
     5/31: $0$memwr$\mem$rtl/memoria.v:27$102_ADDR[31:0]$114
     6/31: $0$memwr$\mem$rtl/memoria.v:27$103_EN[9:0]$118
     7/31: $0$memwr$\mem$rtl/memoria.v:27$103_DATA[9:0]$117
     8/31: $0$memwr$\mem$rtl/memoria.v:27$103_ADDR[31:0]$120
     9/31: $0$memwr$\mem$rtl/memoria.v:27$104_EN[9:0]$113
    10/31: $0$memwr$\mem$rtl/memoria.v:27$104_DATA[9:0]$119
    11/31: $0$memwr$\mem$rtl/memoria.v:27$104_ADDR[31:0]$112
    12/31: $0$memwr$\mem$rtl/memoria.v:27$105_EN[9:0]$123
    13/31: $0$memwr$\mem$rtl/memoria.v:27$105_DATA[9:0]$122
    14/31: $0$memwr$\mem$rtl/memoria.v:27$105_ADDR[31:0]$121
    15/31: $0$memwr$\mem$rtl/memoria.v:27$106_EN[9:0]$126
    16/31: $0$memwr$\mem$rtl/memoria.v:27$106_DATA[9:0]$125
    17/31: $0$memwr$\mem$rtl/memoria.v:27$106_ADDR[31:0]$124
    18/31: $0$memwr$\mem$rtl/memoria.v:27$107_EN[9:0]$129
    19/31: $0$memwr$\mem$rtl/memoria.v:27$107_DATA[9:0]$128
    20/31: $0$memwr$\mem$rtl/memoria.v:27$107_ADDR[31:0]$127
    21/31: $0$memwr$\mem$rtl/memoria.v:27$108_EN[9:0]$132
    22/31: $0$memwr$\mem$rtl/memoria.v:27$108_DATA[9:0]$131
    23/31: $0$memwr$\mem$rtl/memoria.v:27$108_ADDR[31:0]$130
    24/31: $0$memwr$\mem$rtl/memoria.v:27$109_EN[9:0]$135
    25/31: $0$memwr$\mem$rtl/memoria.v:27$109_DATA[9:0]$134
    26/31: $0$memwr$\mem$rtl/memoria.v:27$109_ADDR[31:0]$133
    27/31: $0$memwr$\mem$rtl/memoria.v:34$110_EN[9:0]$138
    28/31: $0$memwr$\mem$rtl/memoria.v:34$110_DATA[9:0]$137
    29/31: $0$memwr$\mem$rtl/memoria.v:34$110_ADDR[2:0]$136
    30/31: $0\valid[0:0]
    31/31: $0\data_out[9:0]

3.6. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\FIFO.\error_flag' from process `\FIFO.$proc$rtl/FIFO.v:149$90'.
No latch inferred for signal `\FIFO.\full_flag' from process `\FIFO.$proc$rtl/FIFO.v:99$70'.
No latch inferred for signal `\FIFO.\almost_empty_flag' from process `\FIFO.$proc$rtl/FIFO.v:99$70'.
No latch inferred for signal `\FIFO.\almost_full_flag' from process `\FIFO.$proc$rtl/FIFO.v:99$70'.
No latch inferred for signal `\FIFO.\empty_flag' from process `\FIFO.$proc$rtl/FIFO.v:99$70'.
No latch inferred for signal `\FIFO.\N' from process `\FIFO.$proc$rtl/FIFO.v:82$66'.

3.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\FIFO.\ff_rd_en' using process `\FIFO.$proc$rtl/FIFO.v:139$88'.
  created $dff cell `$procdff$337' with positive edge clock.
Creating register for signal `\FIFO.\ff_wr_en' using process `\FIFO.$proc$rtl/FIFO.v:139$88'.
  created $dff cell `$procdff$338' with positive edge clock.
Creating register for signal `\FIFO.\ff_N' using process `\FIFO.$proc$rtl/FIFO.v:86$68'.
  created $dff cell `$procdff$339' with positive edge clock.
Creating register for signal `\FIFO.\rd_ptr' using process `\FIFO.$proc$rtl/FIFO.v:69$63'.
  created $dff cell `$procdff$340' with positive edge clock.
Creating register for signal `\FIFO.\wr_ptr' using process `\FIFO.$proc$rtl/FIFO.v:61$60'.
  created $dff cell `$procdff$341' with positive edge clock.
Creating register for signal `\FIFO.\almost_empty_threshold' using process `\FIFO.$proc$rtl/FIFO.v:28$57'.
  created $dff cell `$procdff$342' with positive edge clock.
Creating register for signal `\FIFO.\almost_full_threshold' using process `\FIFO.$proc$rtl/FIFO.v:28$57'.
  created $dff cell `$procdff$343' with positive edge clock.
Creating register for signal `$paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3.\data_out' using process `$paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3.$proc$rtl/memoria.v:22$111'.
  created $dff cell `$procdff$344' with positive edge clock.
Creating register for signal `$paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3.\valid' using process `$paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3.$proc$rtl/memoria.v:22$111'.
  created $dff cell `$procdff$345' with positive edge clock.
Creating register for signal `$paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3.\i' using process `$paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3.$proc$rtl/memoria.v:22$111'.
  created $dff cell `$procdff$346' with positive edge clock.
Creating register for signal `$paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3.$memwr$\mem$rtl/memoria.v:27$104_ADDR' using process `$paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3.$proc$rtl/memoria.v:22$111'.
  created $dff cell `$procdff$347' with positive edge clock.
Creating register for signal `$paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3.$memwr$\mem$rtl/memoria.v:27$104_EN' using process `$paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3.$proc$rtl/memoria.v:22$111'.
  created $dff cell `$procdff$348' with positive edge clock.
Creating register for signal `$paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3.$memwr$\mem$rtl/memoria.v:27$102_ADDR' using process `$paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3.$proc$rtl/memoria.v:22$111'.
  created $dff cell `$procdff$349' with positive edge clock.
Creating register for signal `$paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3.$memwr$\mem$rtl/memoria.v:27$102_DATA' using process `$paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3.$proc$rtl/memoria.v:22$111'.
  created $dff cell `$procdff$350' with positive edge clock.
Creating register for signal `$paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3.$memwr$\mem$rtl/memoria.v:27$102_EN' using process `$paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3.$proc$rtl/memoria.v:22$111'.
  created $dff cell `$procdff$351' with positive edge clock.
Creating register for signal `$paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3.$memwr$\mem$rtl/memoria.v:27$103_DATA' using process `$paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3.$proc$rtl/memoria.v:22$111'.
  created $dff cell `$procdff$352' with positive edge clock.
Creating register for signal `$paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3.$memwr$\mem$rtl/memoria.v:27$103_EN' using process `$paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3.$proc$rtl/memoria.v:22$111'.
  created $dff cell `$procdff$353' with positive edge clock.
Creating register for signal `$paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3.$memwr$\mem$rtl/memoria.v:27$104_DATA' using process `$paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3.$proc$rtl/memoria.v:22$111'.
  created $dff cell `$procdff$354' with positive edge clock.
Creating register for signal `$paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3.$memwr$\mem$rtl/memoria.v:27$103_ADDR' using process `$paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3.$proc$rtl/memoria.v:22$111'.
  created $dff cell `$procdff$355' with positive edge clock.
Creating register for signal `$paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3.$memwr$\mem$rtl/memoria.v:27$105_ADDR' using process `$paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3.$proc$rtl/memoria.v:22$111'.
  created $dff cell `$procdff$356' with positive edge clock.
Creating register for signal `$paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3.$memwr$\mem$rtl/memoria.v:27$105_DATA' using process `$paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3.$proc$rtl/memoria.v:22$111'.
  created $dff cell `$procdff$357' with positive edge clock.
Creating register for signal `$paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3.$memwr$\mem$rtl/memoria.v:27$105_EN' using process `$paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3.$proc$rtl/memoria.v:22$111'.
  created $dff cell `$procdff$358' with positive edge clock.
Creating register for signal `$paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3.$memwr$\mem$rtl/memoria.v:27$106_ADDR' using process `$paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3.$proc$rtl/memoria.v:22$111'.
  created $dff cell `$procdff$359' with positive edge clock.
Creating register for signal `$paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3.$memwr$\mem$rtl/memoria.v:27$106_DATA' using process `$paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3.$proc$rtl/memoria.v:22$111'.
  created $dff cell `$procdff$360' with positive edge clock.
Creating register for signal `$paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3.$memwr$\mem$rtl/memoria.v:27$106_EN' using process `$paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3.$proc$rtl/memoria.v:22$111'.
  created $dff cell `$procdff$361' with positive edge clock.
Creating register for signal `$paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3.$memwr$\mem$rtl/memoria.v:27$107_ADDR' using process `$paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3.$proc$rtl/memoria.v:22$111'.
  created $dff cell `$procdff$362' with positive edge clock.
Creating register for signal `$paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3.$memwr$\mem$rtl/memoria.v:27$107_DATA' using process `$paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3.$proc$rtl/memoria.v:22$111'.
  created $dff cell `$procdff$363' with positive edge clock.
Creating register for signal `$paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3.$memwr$\mem$rtl/memoria.v:27$107_EN' using process `$paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3.$proc$rtl/memoria.v:22$111'.
  created $dff cell `$procdff$364' with positive edge clock.
Creating register for signal `$paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3.$memwr$\mem$rtl/memoria.v:27$108_ADDR' using process `$paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3.$proc$rtl/memoria.v:22$111'.
  created $dff cell `$procdff$365' with positive edge clock.
Creating register for signal `$paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3.$memwr$\mem$rtl/memoria.v:27$108_DATA' using process `$paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3.$proc$rtl/memoria.v:22$111'.
  created $dff cell `$procdff$366' with positive edge clock.
Creating register for signal `$paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3.$memwr$\mem$rtl/memoria.v:27$108_EN' using process `$paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3.$proc$rtl/memoria.v:22$111'.
  created $dff cell `$procdff$367' with positive edge clock.
Creating register for signal `$paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3.$memwr$\mem$rtl/memoria.v:27$109_ADDR' using process `$paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3.$proc$rtl/memoria.v:22$111'.
  created $dff cell `$procdff$368' with positive edge clock.
Creating register for signal `$paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3.$memwr$\mem$rtl/memoria.v:27$109_DATA' using process `$paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3.$proc$rtl/memoria.v:22$111'.
  created $dff cell `$procdff$369' with positive edge clock.
Creating register for signal `$paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3.$memwr$\mem$rtl/memoria.v:27$109_EN' using process `$paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3.$proc$rtl/memoria.v:22$111'.
  created $dff cell `$procdff$370' with positive edge clock.
Creating register for signal `$paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3.$memwr$\mem$rtl/memoria.v:34$110_ADDR' using process `$paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3.$proc$rtl/memoria.v:22$111'.
  created $dff cell `$procdff$371' with positive edge clock.
Creating register for signal `$paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3.$memwr$\mem$rtl/memoria.v:34$110_DATA' using process `$paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3.$proc$rtl/memoria.v:22$111'.
  created $dff cell `$procdff$372' with positive edge clock.
Creating register for signal `$paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3.$memwr$\mem$rtl/memoria.v:34$110_EN' using process `$paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3.$proc$rtl/memoria.v:22$111'.
  created $dff cell `$procdff$373' with positive edge clock.

3.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\FIFO.$proc$rtl/FIFO.v:149$90'.
Removing empty process `FIFO.$proc$rtl/FIFO.v:149$90'.
Found and cleaned up 1 empty switch in `\FIFO.$proc$rtl/FIFO.v:139$88'.
Removing empty process `FIFO.$proc$rtl/FIFO.v:139$88'.
Found and cleaned up 7 empty switches in `\FIFO.$proc$rtl/FIFO.v:99$70'.
Removing empty process `FIFO.$proc$rtl/FIFO.v:99$70'.
Found and cleaned up 1 empty switch in `\FIFO.$proc$rtl/FIFO.v:86$68'.
Removing empty process `FIFO.$proc$rtl/FIFO.v:86$68'.
Removing empty process `FIFO.$proc$rtl/FIFO.v:82$66'.
Found and cleaned up 2 empty switches in `\FIFO.$proc$rtl/FIFO.v:69$63'.
Removing empty process `FIFO.$proc$rtl/FIFO.v:69$63'.
Found and cleaned up 2 empty switches in `\FIFO.$proc$rtl/FIFO.v:61$60'.
Removing empty process `FIFO.$proc$rtl/FIFO.v:61$60'.
Found and cleaned up 2 empty switches in `\FIFO.$proc$rtl/FIFO.v:28$57'.
Removing empty process `FIFO.$proc$rtl/FIFO.v:28$57'.
Found and cleaned up 3 empty switches in `$paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3.$proc$rtl/memoria.v:22$111'.
Removing empty process `$paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3.$proc$rtl/memoria.v:22$111'.
Cleaned up 19 empty switches.

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module FIFO.
<suppressed ~10 debug messages>
Optimizing module $paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3.
<suppressed ~30 debug messages>

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\FIFO'.
<suppressed ~21 debug messages>
Finding identical cells in module `$paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3'.
Removed a total of 7 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \FIFO..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$204.
    dead port 2/2 on $mux $procmux$198.
    dead port 1/2 on $mux $procmux$186.
    dead port 1/2 on $mux $procmux$180.
    dead port 1/2 on $mux $procmux$174.
    dead port 2/2 on $mux $procmux$171.
    dead port 1/2 on $mux $procmux$165.
    dead port 2/2 on $mux $procmux$162.
Running muxtree optimizer on module $paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 8 multiplexer ports.
<suppressed ~42 debug messages>

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \FIFO.
  Optimizing cells in module $paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3.
    Consolidated identical input bits for $mux cell $procmux$310:
      Old ports: A=10'0000000000, B=10'1111111111, Y=$procmux$310_Y
      New ports: A=1'0, B=1'1, Y=$procmux$310_Y [0]
      New connections: $procmux$310_Y [9:1] = { $procmux$310_Y [0] $procmux$310_Y [0] $procmux$310_Y [0] $procmux$310_Y [0] $procmux$310_Y [0] $procmux$310_Y [0] $procmux$310_Y [0] $procmux$310_Y [0] $procmux$310_Y [0] }
    Consolidated identical input bits for $mux cell $procmux$302:
      Old ports: A=10'1111111111, B=10'0000000000, Y=$procmux$302_Y
      New ports: A=1'1, B=1'0, Y=$procmux$302_Y [0]
      New connections: $procmux$302_Y [9:1] = { $procmux$302_Y [0] $procmux$302_Y [0] $procmux$302_Y [0] $procmux$302_Y [0] $procmux$302_Y [0] $procmux$302_Y [0] $procmux$302_Y [0] $procmux$302_Y [0] $procmux$302_Y [0] }
    Consolidated identical input bits for $mux cell $procmux$293:
      Old ports: A=10'1111111111, B=10'0000000000, Y=$procmux$293_Y
      New ports: A=1'1, B=1'0, Y=$procmux$293_Y [0]
      New connections: $procmux$293_Y [9:1] = { $procmux$293_Y [0] $procmux$293_Y [0] $procmux$293_Y [0] $procmux$293_Y [0] $procmux$293_Y [0] $procmux$293_Y [0] $procmux$293_Y [0] $procmux$293_Y [0] $procmux$293_Y [0] }
    Consolidated identical input bits for $mux cell $procmux$284:
      Old ports: A=10'1111111111, B=10'0000000000, Y=$procmux$284_Y
      New ports: A=1'1, B=1'0, Y=$procmux$284_Y [0]
      New connections: $procmux$284_Y [9:1] = { $procmux$284_Y [0] $procmux$284_Y [0] $procmux$284_Y [0] $procmux$284_Y [0] $procmux$284_Y [0] $procmux$284_Y [0] $procmux$284_Y [0] $procmux$284_Y [0] $procmux$284_Y [0] }
    Consolidated identical input bits for $mux cell $procmux$275:
      Old ports: A=10'1111111111, B=10'0000000000, Y=$procmux$275_Y
      New ports: A=1'1, B=1'0, Y=$procmux$275_Y [0]
      New connections: $procmux$275_Y [9:1] = { $procmux$275_Y [0] $procmux$275_Y [0] $procmux$275_Y [0] $procmux$275_Y [0] $procmux$275_Y [0] $procmux$275_Y [0] $procmux$275_Y [0] $procmux$275_Y [0] $procmux$275_Y [0] }
    Consolidated identical input bits for $mux cell $procmux$266:
      Old ports: A=10'1111111111, B=10'0000000000, Y=$procmux$266_Y
      New ports: A=1'1, B=1'0, Y=$procmux$266_Y [0]
      New connections: $procmux$266_Y [9:1] = { $procmux$266_Y [0] $procmux$266_Y [0] $procmux$266_Y [0] $procmux$266_Y [0] $procmux$266_Y [0] $procmux$266_Y [0] $procmux$266_Y [0] $procmux$266_Y [0] $procmux$266_Y [0] }
    Consolidated identical input bits for $mux cell $procmux$257:
      Old ports: A=10'1111111111, B=10'0000000000, Y=$procmux$257_Y
      New ports: A=1'1, B=1'0, Y=$procmux$257_Y [0]
      New connections: $procmux$257_Y [9:1] = { $procmux$257_Y [0] $procmux$257_Y [0] $procmux$257_Y [0] $procmux$257_Y [0] $procmux$257_Y [0] $procmux$257_Y [0] $procmux$257_Y [0] $procmux$257_Y [0] $procmux$257_Y [0] }
    Consolidated identical input bits for $mux cell $procmux$248:
      Old ports: A=10'1111111111, B=10'0000000000, Y=$procmux$248_Y
      New ports: A=1'1, B=1'0, Y=$procmux$248_Y [0]
      New connections: $procmux$248_Y [9:1] = { $procmux$248_Y [0] $procmux$248_Y [0] $procmux$248_Y [0] $procmux$248_Y [0] $procmux$248_Y [0] $procmux$248_Y [0] $procmux$248_Y [0] $procmux$248_Y [0] $procmux$248_Y [0] }
    Consolidated identical input bits for $mux cell $procmux$239:
      Old ports: A=10'1111111111, B=10'0000000000, Y=$procmux$239_Y
      New ports: A=1'1, B=1'0, Y=$procmux$239_Y [0]
      New connections: $procmux$239_Y [9:1] = { $procmux$239_Y [0] $procmux$239_Y [0] $procmux$239_Y [0] $procmux$239_Y [0] $procmux$239_Y [0] $procmux$239_Y [0] $procmux$239_Y [0] $procmux$239_Y [0] $procmux$239_Y [0] }
  Optimizing cells in module $paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3.
    Consolidated identical input bits for $mux cell $procmux$313:
      Old ports: A=10'0000000000, B=$procmux$310_Y, Y=$procmux$313_Y
      New ports: A=1'0, B=$procmux$310_Y [0], Y=$procmux$313_Y [0]
      New connections: $procmux$313_Y [9:1] = { $procmux$313_Y [0] $procmux$313_Y [0] $procmux$313_Y [0] $procmux$313_Y [0] $procmux$313_Y [0] $procmux$313_Y [0] $procmux$313_Y [0] $procmux$313_Y [0] $procmux$313_Y [0] }
  Optimizing cells in module $paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3.
Performed a total of 10 changes.

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\FIFO'.
Finding identical cells in module `$paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3'.
<suppressed ~84 debug messages>
Removed a total of 28 cells.

4.6. Executing OPT_RMDFF pass (remove dff with constant values).
Removing $procdff$346 ($dff) from module $paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3.
Replaced 1 DFF cells.

4.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \FIFO..
Finding unused cells or wires in module $paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3..
Removed 3 unused cells and 171 unused wires.
<suppressed ~5 debug messages>

4.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3.
Optimizing module FIFO.

4.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \FIFO..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~27 debug messages>

4.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3.
  Optimizing cells in module \FIFO.
Performed a total of 0 changes.

4.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3'.
Finding identical cells in module `\FIFO'.
Removed a total of 0 cells.

4.13. Executing OPT_RMDFF pass (remove dff with constant values).

4.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3..
Finding unused cells or wires in module \FIFO..

4.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3.
Optimizing module FIFO.

4.16. Finished OPT passes. (There is nothing left to do.)

5. Executing FSM pass (extract and optimize FSM).

5.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking $paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3.$memwr$\mem$rtl/memoria.v:27$102_ADDR as FSM state register:
    Users of register don't seem to benefit from recoding.
Not marking $paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3.$memwr$\mem$rtl/memoria.v:27$102_DATA as FSM state register:
    Users of register don't seem to benefit from recoding.
Not marking $paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3.$memwr$\mem$rtl/memoria.v:27$102_EN as FSM state register:
    Users of register don't seem to benefit from recoding.
Not marking $paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3.$memwr$\mem$rtl/memoria.v:27$103_ADDR as FSM state register:
    Users of register don't seem to benefit from recoding.
Not marking $paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3.$memwr$\mem$rtl/memoria.v:27$104_ADDR as FSM state register:
    Users of register don't seem to benefit from recoding.
Not marking $paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3.$memwr$\mem$rtl/memoria.v:27$105_ADDR as FSM state register:
    Users of register don't seem to benefit from recoding.
Not marking $paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3.$memwr$\mem$rtl/memoria.v:27$106_ADDR as FSM state register:
    Users of register don't seem to benefit from recoding.
Not marking $paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3.$memwr$\mem$rtl/memoria.v:27$107_ADDR as FSM state register:
    Users of register don't seem to benefit from recoding.
Not marking $paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3.$memwr$\mem$rtl/memoria.v:27$108_ADDR as FSM state register:
    Users of register don't seem to benefit from recoding.
Not marking $paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3.$memwr$\mem$rtl/memoria.v:27$109_ADDR as FSM state register:
    Users of register don't seem to benefit from recoding.
Not marking $paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3.$memwr$\mem$rtl/memoria.v:34$110_EN as FSM state register:
    Users of register don't seem to benefit from recoding.

5.2. Executing FSM_EXTRACT pass (extracting FSM from design).

5.3. Executing FSM_OPT pass (simple optimizations of FSMs).

5.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3..
Finding unused cells or wires in module \FIFO..

5.5. Executing FSM_OPT pass (simple optimizations of FSMs).

5.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

5.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

5.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

6. Executing OPT pass (performing simple optimizations).

6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3.
Optimizing module FIFO.

6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3'.
Finding identical cells in module `\FIFO'.
Removed a total of 0 cells.

6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \FIFO..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~27 debug messages>

6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3.
  Optimizing cells in module \FIFO.
Performed a total of 0 changes.

6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3'.
Finding identical cells in module `\FIFO'.
Removed a total of 0 cells.

6.6. Executing OPT_RMDFF pass (remove dff with constant values).

6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3..
Finding unused cells or wires in module \FIFO..

6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3.
Optimizing module FIFO.

6.9. Finished OPT passes. (There is nothing left to do.)

7. Executing MEMORY pass.

7.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).
Checking cell `$memwr$\mem$rtl/memoria.v:27$141' in module `$paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3': merged $dff to cell.
Checking cell `$memwr$\mem$rtl/memoria.v:27$142' in module `$paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3': merged $dff to cell.
Checking cell `$memwr$\mem$rtl/memoria.v:27$143' in module `$paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3': merged $dff to cell.
Checking cell `$memwr$\mem$rtl/memoria.v:27$144' in module `$paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3': merged $dff to cell.
Checking cell `$memwr$\mem$rtl/memoria.v:27$145' in module `$paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3': merged $dff to cell.
Checking cell `$memwr$\mem$rtl/memoria.v:27$146' in module `$paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3': merged $dff to cell.
Checking cell `$memwr$\mem$rtl/memoria.v:27$147' in module `$paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3': merged $dff to cell.
Checking cell `$memwr$\mem$rtl/memoria.v:27$148' in module `$paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3': merged $dff to cell.
Checking cell `$memwr$\mem$rtl/memoria.v:34$149' in module `$paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3': merged $dff to cell.
Checking cell `$memrd$\mem$rtl/memoria.v:36$140' in module `$paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3': no (compatible) $dff found.

7.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3..
Finding unused cells or wires in module \FIFO..
Removed 13 unused cells and 13 unused wires.
<suppressed ~14 debug messages>

7.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).
Consolidating write ports of memory $paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3.mem by address:
  New clock domain: posedge \clk
    Port 0 ($memwr$\mem$rtl/memoria.v:27$141) has addr 0.
      Active bits: 1111111111
    Port 1 ($memwr$\mem$rtl/memoria.v:27$142) has addr 1.
      Active bits: 1111111111
    Port 2 ($memwr$\mem$rtl/memoria.v:27$143) has addr 2.
      Active bits: 1111111111
    Port 3 ($memwr$\mem$rtl/memoria.v:27$144) has addr 3.
      Active bits: 1111111111
    Port 4 ($memwr$\mem$rtl/memoria.v:27$145) has addr 4.
      Active bits: 1111111111
    Port 5 ($memwr$\mem$rtl/memoria.v:27$146) has addr 5.
      Active bits: 1111111111
    Port 6 ($memwr$\mem$rtl/memoria.v:27$147) has addr 6.
      Active bits: 1111111111
    Port 7 ($memwr$\mem$rtl/memoria.v:27$148) has addr 7.
      Active bits: 1111111111
    Port 8 ($memwr$\mem$rtl/memoria.v:34$149) has addr \wr_ptr.
      Active bits: 1111111111
Consolidating write ports of memory $paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3.mem using sat-based resource sharing:
  Port 0 ($memwr$\mem$rtl/memoria.v:27$141) on posedge \clk: considered
  Port 1 ($memwr$\mem$rtl/memoria.v:27$142) on posedge \clk: considered
  Port 2 ($memwr$\mem$rtl/memoria.v:27$143) on posedge \clk: considered
  Port 3 ($memwr$\mem$rtl/memoria.v:27$144) on posedge \clk: considered
  Port 4 ($memwr$\mem$rtl/memoria.v:27$145) on posedge \clk: considered
  Port 5 ($memwr$\mem$rtl/memoria.v:27$146) on posedge \clk: considered
  Port 6 ($memwr$\mem$rtl/memoria.v:27$147) on posedge \clk: considered
  Port 7 ($memwr$\mem$rtl/memoria.v:27$148) on posedge \clk: considered
  Port 8 ($memwr$\mem$rtl/memoria.v:34$149) on posedge \clk: considered
  Common input cone for all EN signals: 3 cells.
  Size of unconstrained SAT problem: 23 variables, 53 clauses
  According to SAT solver sharing of port 0 with port 1 is not possible.
  According to SAT solver sharing of port 1 with port 2 is not possible.
  According to SAT solver sharing of port 2 with port 3 is not possible.
  According to SAT solver sharing of port 3 with port 4 is not possible.
  According to SAT solver sharing of port 4 with port 5 is not possible.
  According to SAT solver sharing of port 5 with port 6 is not possible.
  According to SAT solver sharing of port 6 with port 7 is not possible.
  Merging port 7 into port 8.

7.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3..
Finding unused cells or wires in module \FIFO..

7.5. Executing MEMORY_COLLECT pass (generating $mem cells).
Collecting $memrd, $memwr and $meminit for memory `\mem' in module `$paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3':
  $memwr$\mem$rtl/memoria.v:27$141 ($memwr)
  $memwr$\mem$rtl/memoria.v:27$142 ($memwr)
  $memwr$\mem$rtl/memoria.v:27$143 ($memwr)
  $memwr$\mem$rtl/memoria.v:27$144 ($memwr)
  $memwr$\mem$rtl/memoria.v:27$145 ($memwr)
  $memwr$\mem$rtl/memoria.v:27$146 ($memwr)
  $memwr$\mem$rtl/memoria.v:27$147 ($memwr)
  $memwr$\mem$rtl/memoria.v:34$149 ($memwr)
  $memrd$\mem$rtl/memoria.v:36$140 ($memrd)

7.6. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).
Mapping memory cell \mem in module $paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3:
  created 8 $dff cells and 0 static cells of width 10.
  read interface: 0 $dff and 7 $mux cells.
  write interface: 64 write mux blocks.

8. Executing OPT pass (performing simple optimizations).

8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3.
<suppressed ~49 debug messages>
Optimizing module FIFO.

8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3'.
Finding identical cells in module `\FIFO'.
Removed a total of 0 cells.

8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port B of cell $auto$memory_share.cc:646:consolidate_wr_using_sat$381: $0$memwr$\mem$rtl/memoria.v:34$110_EN[9:0]$138 [9] -> 1'1
  Analyzing evaluation results.
Running muxtree optimizer on module \FIFO..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~35 debug messages>

8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3.
  Optimizing cells in module \FIFO.
Performed a total of 0 changes.

8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3'.
Finding identical cells in module `\FIFO'.
Removed a total of 0 cells.

8.6. Executing OPT_RMDFF pass (remove dff with constant values).

8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3..
Finding unused cells or wires in module \FIFO..
Removed 0 unused cells and 38 unused wires.
<suppressed ~1 debug messages>

8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3.
Optimizing module FIFO.

8.9. Finished OPT passes. (There is nothing left to do.)

9. Executing TECHMAP pass (map to technology primitives).

9.1. Executing Verilog-2005 frontend: <techmap.v>
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

9.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $logic_and.
Running "alumacc" on wrapper $extern:wrap:$add:A_SIGNED=0:A_WIDTH=3:B_SIGNED=0:B_WIDTH=32:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$add:A_SIGNED=0:A_WIDTH=3:B_SIGNED=0:B_WIDTH=32:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$add:A_SIGNED=0:A_WIDTH=3:B_SIGNED=0:B_WIDTH=32:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$gt:A_SIGNED=0:A_WIDTH=3:B_SIGNED=0:B_WIDTH=32:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$gt:A_SIGNED=0:A_WIDTH=3:B_SIGNED=0:B_WIDTH=32:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$gt:A_SIGNED=0:A_WIDTH=3:B_SIGNED=0:B_WIDTH=32:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:A_SIGNED=0:A_WIDTH=3:B_SIGNED=0:B_WIDTH=3:Y_WIDTH=3:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:A_SIGNED=0:A_WIDTH=3:B_SIGNED=0:B_WIDTH=3:Y_WIDTH=3:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:A_SIGNED=0:A_WIDTH=3:B_SIGNED=0:B_WIDTH=3:Y_WIDTH=3:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$lt:A_SIGNED=0:A_WIDTH=3:B_SIGNED=0:B_WIDTH=32:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$lt:A_SIGNED=0:A_WIDTH=3:B_SIGNED=0:B_WIDTH=32:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$lt:A_SIGNED=0:A_WIDTH=3:B_SIGNED=0:B_WIDTH=32:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$le:A_SIGNED=0:A_WIDTH=3:B_SIGNED=0:B_WIDTH=3:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$le:A_SIGNED=0:A_WIDTH=3:B_SIGNED=0:B_WIDTH=3:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$le:A_SIGNED=0:A_WIDTH=3:B_SIGNED=0:B_WIDTH=3:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:A_SIGNED=0:A_WIDTH=3:B_SIGNED=0:B_WIDTH=3:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:A_SIGNED=0:A_WIDTH=3:B_SIGNED=0:B_WIDTH=3:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:A_SIGNED=0:A_WIDTH=3:B_SIGNED=0:B_WIDTH=3:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $logic_or.
Using extmapper simplemap for cells of type $dff.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=3\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $reduce_and.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=3\B_WIDTH=3\Y_WIDTH=3 for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=32 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=3 for cells of type $lcu.
No more expansions possible.
<suppressed ~1395 debug messages>

10. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell DFF (noninv, pins=3, area=18.00) is a direct match for cell type $_DFF_P_.
  cell DFFSR (noninv, pins=5, area=18.00) is a direct match for cell type $_DFFSR_PPP_.
  create mapping for $_DFFSR_PNP_ from mapping for $_DFFSR_PPP_.
  create mapping for $_DFFSR_PNN_ from mapping for $_DFFSR_PNP_.
  create mapping for $_DFFSR_PPN_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFF_N_ from mapping for $_DFF_P_.
  create mapping for $_DFFSR_NNN_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_NPN_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFFSR_NNP_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFFSR_NPP_ from mapping for $_DFFSR_NNP_.
  create mapping for $_DFF_NN0_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFF_NN1_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFF_NP0_ from mapping for $_DFFSR_NPP_.
  create mapping for $_DFF_NP1_ from mapping for $_DFFSR_NPP_.
  create mapping for $_DFF_PN0_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFF_PN1_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFF_PP0_ from mapping for $_DFFSR_PPP_.
  create mapping for $_DFF_PP1_ from mapping for $_DFFSR_PPP_.
  final dff cell mappings:
    DFF _DFF_N_ (.C(~C), .D( D), .Q( Q));
    DFF _DFF_P_ (.C( C), .D( D), .Q( Q));
    DFFSR _DFF_NN0_ (.C(~C), .D( D), .Q( Q), .R(~R), .S( 0));
    DFFSR _DFF_NN1_ (.C(~C), .D( D), .Q( Q), .R( 0), .S(~R));
    DFFSR _DFF_NP0_ (.C(~C), .D( D), .Q( Q), .R( R), .S( 0));
    DFFSR _DFF_NP1_ (.C(~C), .D( D), .Q( Q), .R( 0), .S( R));
    DFFSR _DFF_PN0_ (.C( C), .D( D), .Q( Q), .R(~R), .S( 0));
    DFFSR _DFF_PN1_ (.C( C), .D( D), .Q( Q), .R( 0), .S(~R));
    DFFSR _DFF_PP0_ (.C( C), .D( D), .Q( Q), .R( R), .S( 0));
    DFFSR _DFF_PP1_ (.C( C), .D( D), .Q( Q), .R( 0), .S( R));
    DFFSR _DFFSR_NNN_ (.C(~C), .D( D), .Q( Q), .R(~R), .S(~S));
    DFFSR _DFFSR_NNP_ (.C(~C), .D( D), .Q( Q), .R( R), .S(~S));
    DFFSR _DFFSR_NPN_ (.C(~C), .D( D), .Q( Q), .R(~R), .S( S));
    DFFSR _DFFSR_NPP_ (.C(~C), .D( D), .Q( Q), .R( R), .S( S));
    DFFSR _DFFSR_PNN_ (.C( C), .D( D), .Q( Q), .R(~R), .S(~S));
    DFFSR _DFFSR_PNP_ (.C( C), .D( D), .Q( Q), .R( R), .S(~S));
    DFFSR _DFFSR_PPN_ (.C( C), .D( D), .Q( Q), .R(~R), .S( S));
    DFFSR _DFFSR_PPP_ (.C( C), .D( D), .Q( Q), .R( R), .S( S));
Mapping DFF cells in module `$paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3':
  mapped 91 $_DFF_P_ cells to \DFF cells.
Mapping DFF cells in module `\FIFO':
  mapped 17 $_DFF_P_ cells to \DFF cells.

11. Executing ABC pass (technology mapping using ABC).

11.1. Extracting gate netlist of module `$paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3' to `<abc-temp-dir>/input.blif'..
Extracted 1254 gates and 1366 wires to a netlist network with 109 inputs and 91 outputs.

11.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /home/isaac/Desktop/Proyecto-Digitales-II-G3/parte2_capa_transaccion/FIFO/synthesis/cmos_cells/cmos_cells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Warning: Templates are not defined.
ABC: Libery parser cannot read "time_unit".  Assuming   time_unit : "1ns".
ABC: Libery parser cannot read "capacitive_load_unit". Assuming   capacitive_load_unit(1, pf).
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Library "demo" from "/home/isaac/Desktop/Proyecto-Digitales-II-G3/parte2_capa_transaccion/FIFO/synthesis/cmos_cells/cmos_cells.lib" has 4 cells (2 skipped: 2 seq; 0 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.00 MB. Time =     0.00 sec
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

11.1.2. Re-integrating ABC results.
ABC RESULTS:              NAND cells:      234
ABC RESULTS:               NOR cells:      358
ABC RESULTS:               NOT cells:      101
ABC RESULTS:        internal signals:     1166
ABC RESULTS:           input signals:      109
ABC RESULTS:          output signals:       91
Removing temp directory.

11.2. Extracting gate netlist of module `\FIFO' to `<abc-temp-dir>/input.blif'..
Extracted 1392 gates and 1421 wires to a netlist network with 27 inputs and 22 outputs.

11.2.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /home/isaac/Desktop/Proyecto-Digitales-II-G3/parte2_capa_transaccion/FIFO/synthesis/cmos_cells/cmos_cells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Warning: Templates are not defined.
ABC: Libery parser cannot read "time_unit".  Assuming   time_unit : "1ns".
ABC: Libery parser cannot read "capacitive_load_unit". Assuming   capacitive_load_unit(1, pf).
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Library "demo" from "/home/isaac/Desktop/Proyecto-Digitales-II-G3/parte2_capa_transaccion/FIFO/synthesis/cmos_cells/cmos_cells.lib" has 4 cells (2 skipped: 2 seq; 0 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.00 MB. Time =     0.00 sec
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

11.2.2. Re-integrating ABC results.
ABC RESULTS:              NAND cells:       58
ABC RESULTS:               NOR cells:       57
ABC RESULTS:               NOT cells:       27
ABC RESULTS:        internal signals:     1372
ABC RESULTS:           input signals:       27
ABC RESULTS:          output signals:       22
Removing temp directory.
Removed 0 unused cells and 1180 unused wires.

12. Executing Verilog backend.
Dumping module `$paramod\memoria\MEM_DEPTH=8\WORD_SIZE=10\PTR_SIZE=3'.
Dumping module `\FIFO'.

End of script. Logfile hash: bb8a4a1d00
CPU: user 0.38s system 0.17s, MEM: 23.13 MB total, 17.07 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 27% 2x write_verilog (0 sec), 14% 1x techmap (0 sec), ...
