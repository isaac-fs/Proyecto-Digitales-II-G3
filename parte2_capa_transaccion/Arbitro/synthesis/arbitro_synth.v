/* Generated by Yosys 0.9 (git sha1 1979e0b) */

(* dynports =  1  *)
(* top =  1  *)
(* src = "rtl/arbitro.v:1" *)
module arbitro_synth(empty_p0, empty_p1, empty_p2, empty_p3, almostfull_p0, almostfull_p1, almostfull_p2, almostfull_p3, data_in_0, data_in_1, data_in_2, data_in_3, data_out_0, data_out_1, data_out_2, data_out_3, pop_p0, pop_p1, pop_p2, pop_p3, push_p0, push_p1, push_p2, push_p3);
  wire _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  wire _081_;
  wire _082_;
  wire _083_;
  wire _084_;
  wire _085_;
  wire _086_;
  wire _087_;
  wire _088_;
  wire _089_;
  wire _090_;
  wire _091_;
  wire _092_;
  wire _093_;
  wire _094_;
  wire _095_;
  (* src = "rtl/arbitro.v:10" *)
  input almostfull_p0;
  (* src = "rtl/arbitro.v:11" *)
  input almostfull_p1;
  (* src = "rtl/arbitro.v:12" *)
  input almostfull_p2;
  (* src = "rtl/arbitro.v:13" *)
  input almostfull_p3;
  (* src = "rtl/arbitro.v:15" *)
  input [9:0] data_in_0;
  (* src = "rtl/arbitro.v:16" *)
  input [9:0] data_in_1;
  (* src = "rtl/arbitro.v:17" *)
  input [9:0] data_in_2;
  (* src = "rtl/arbitro.v:18" *)
  input [9:0] data_in_3;
  (* src = "rtl/arbitro.v:21" *)
  output [9:0] data_out_0;
  (* src = "rtl/arbitro.v:22" *)
  output [9:0] data_out_1;
  (* src = "rtl/arbitro.v:23" *)
  output [9:0] data_out_2;
  (* src = "rtl/arbitro.v:24" *)
  output [9:0] data_out_3;
  (* src = "rtl/arbitro.v:5" *)
  input empty_p0;
  (* src = "rtl/arbitro.v:6" *)
  input empty_p1;
  (* src = "rtl/arbitro.v:7" *)
  input empty_p2;
  (* src = "rtl/arbitro.v:8" *)
  input empty_p3;
  (* src = "rtl/arbitro.v:27" *)
  output pop_p0;
  (* src = "rtl/arbitro.v:28" *)
  output pop_p1;
  (* src = "rtl/arbitro.v:29" *)
  output pop_p2;
  (* src = "rtl/arbitro.v:30" *)
  output pop_p3;
  (* src = "rtl/arbitro.v:32" *)
  output push_p0;
  (* src = "rtl/arbitro.v:33" *)
  output push_p1;
  (* src = "rtl/arbitro.v:34" *)
  output push_p2;
  (* src = "rtl/arbitro.v:35" *)
  output push_p3;
  NOT _096_ (
    .A(empty_p1),
    .Y(_094_)
  );
  NOT _097_ (
    .A(empty_p2),
    .Y(_095_)
  );
  NAND _098_ (
    .A(empty_p0),
    .B(empty_p1),
    .Y(_000_)
  );
  NOR _099_ (
    .A(_095_),
    .B(_000_),
    .Y(_001_)
  );
  NOR _100_ (
    .A(almostfull_p0),
    .B(almostfull_p1),
    .Y(_002_)
  );
  NOR _101_ (
    .A(almostfull_p2),
    .B(almostfull_p3),
    .Y(_003_)
  );
  NAND _102_ (
    .A(_002_),
    .B(_003_),
    .Y(_004_)
  );
  NOT _103_ (
    .A(_004_),
    .Y(_005_)
  );
  NAND _104_ (
    .A(_001_),
    .B(_005_),
    .Y(_006_)
  );
  NOR _105_ (
    .A(empty_p3),
    .B(_006_),
    .Y(pop_p3)
  );
  NAND _106_ (
    .A(data_in_3[8]),
    .B(pop_p3),
    .Y(_007_)
  );
  NOR _107_ (
    .A(empty_p2),
    .B(_000_),
    .Y(_008_)
  );
  NOT _108_ (
    .A(_008_),
    .Y(_009_)
  );
  NOR _109_ (
    .A(_004_),
    .B(_009_),
    .Y(pop_p2)
  );
  NAND _110_ (
    .A(data_in_2[8]),
    .B(pop_p2),
    .Y(_010_)
  );
  NOT _111_ (
    .A(_010_),
    .Y(_011_)
  );
  NOR _112_ (
    .A(empty_p0),
    .B(_004_),
    .Y(pop_p0)
  );
  NAND _113_ (
    .A(data_in_0[8]),
    .B(pop_p0),
    .Y(_012_)
  );
  NAND _114_ (
    .A(empty_p0),
    .B(_094_),
    .Y(_013_)
  );
  NOR _115_ (
    .A(_004_),
    .B(_013_),
    .Y(pop_p1)
  );
  NAND _116_ (
    .A(data_in_1[8]),
    .B(pop_p1),
    .Y(_014_)
  );
  NAND _117_ (
    .A(_012_),
    .B(_014_),
    .Y(_015_)
  );
  NOR _118_ (
    .A(_011_),
    .B(_015_),
    .Y(_016_)
  );
  NAND _119_ (
    .A(_007_),
    .B(_012_),
    .Y(_017_)
  );
  NAND _120_ (
    .A(_010_),
    .B(_014_),
    .Y(_018_)
  );
  NOR _121_ (
    .A(_017_),
    .B(_018_),
    .Y(_019_)
  );
  NAND _122_ (
    .A(_007_),
    .B(_016_),
    .Y(_020_)
  );
  NAND _123_ (
    .A(data_in_3[9]),
    .B(pop_p3),
    .Y(_021_)
  );
  NAND _124_ (
    .A(data_in_2[9]),
    .B(pop_p2),
    .Y(_022_)
  );
  NOT _125_ (
    .A(_022_),
    .Y(_023_)
  );
  NAND _126_ (
    .A(data_in_0[9]),
    .B(pop_p0),
    .Y(_024_)
  );
  NAND _127_ (
    .A(data_in_1[9]),
    .B(pop_p1),
    .Y(_025_)
  );
  NAND _128_ (
    .A(_024_),
    .B(_025_),
    .Y(_026_)
  );
  NOR _129_ (
    .A(_023_),
    .B(_026_),
    .Y(_027_)
  );
  NAND _130_ (
    .A(_021_),
    .B(_024_),
    .Y(_028_)
  );
  NAND _131_ (
    .A(_022_),
    .B(_025_),
    .Y(_029_)
  );
  NOR _132_ (
    .A(_028_),
    .B(_029_),
    .Y(_030_)
  );
  NAND _133_ (
    .A(_021_),
    .B(_027_),
    .Y(_031_)
  );
  NAND _134_ (
    .A(_020_),
    .B(_030_),
    .Y(_032_)
  );
  NOT _135_ (
    .A(_032_),
    .Y(data_out_1[8])
  );
  NAND _136_ (
    .A(data_in_3[7]),
    .B(pop_p3),
    .Y(_033_)
  );
  NAND _137_ (
    .A(data_in_1[7]),
    .B(pop_p1),
    .Y(_034_)
  );
  NAND _138_ (
    .A(data_in_0[7]),
    .B(pop_p0),
    .Y(_035_)
  );
  NAND _139_ (
    .A(data_in_2[7]),
    .B(pop_p2),
    .Y(_036_)
  );
  NAND _140_ (
    .A(_033_),
    .B(_035_),
    .Y(_037_)
  );
  NAND _141_ (
    .A(_034_),
    .B(_036_),
    .Y(_038_)
  );
  NOR _142_ (
    .A(_037_),
    .B(_038_),
    .Y(_039_)
  );
  NOR _143_ (
    .A(_032_),
    .B(_039_),
    .Y(data_out_1[7])
  );
  NAND _144_ (
    .A(data_in_3[6]),
    .B(pop_p3),
    .Y(_040_)
  );
  NAND _145_ (
    .A(data_in_2[6]),
    .B(pop_p2),
    .Y(_041_)
  );
  NAND _146_ (
    .A(data_in_0[6]),
    .B(pop_p0),
    .Y(_042_)
  );
  NAND _147_ (
    .A(data_in_1[6]),
    .B(pop_p1),
    .Y(_043_)
  );
  NAND _148_ (
    .A(_040_),
    .B(_042_),
    .Y(_044_)
  );
  NAND _149_ (
    .A(_041_),
    .B(_043_),
    .Y(_045_)
  );
  NOR _150_ (
    .A(_044_),
    .B(_045_),
    .Y(_046_)
  );
  NOR _151_ (
    .A(_032_),
    .B(_046_),
    .Y(data_out_1[6])
  );
  NAND _152_ (
    .A(data_in_3[5]),
    .B(pop_p3),
    .Y(_047_)
  );
  NAND _153_ (
    .A(data_in_1[5]),
    .B(pop_p1),
    .Y(_048_)
  );
  NAND _154_ (
    .A(data_in_0[5]),
    .B(pop_p0),
    .Y(_049_)
  );
  NAND _155_ (
    .A(data_in_2[5]),
    .B(pop_p2),
    .Y(_050_)
  );
  NAND _156_ (
    .A(_047_),
    .B(_049_),
    .Y(_051_)
  );
  NAND _157_ (
    .A(_048_),
    .B(_050_),
    .Y(_052_)
  );
  NOR _158_ (
    .A(_051_),
    .B(_052_),
    .Y(_053_)
  );
  NOR _159_ (
    .A(_032_),
    .B(_053_),
    .Y(data_out_1[5])
  );
  NAND _160_ (
    .A(data_in_3[4]),
    .B(pop_p3),
    .Y(_054_)
  );
  NAND _161_ (
    .A(data_in_1[4]),
    .B(pop_p1),
    .Y(_055_)
  );
  NAND _162_ (
    .A(data_in_0[4]),
    .B(pop_p0),
    .Y(_056_)
  );
  NAND _163_ (
    .A(data_in_2[4]),
    .B(pop_p2),
    .Y(_057_)
  );
  NAND _164_ (
    .A(_054_),
    .B(_056_),
    .Y(_058_)
  );
  NAND _165_ (
    .A(_055_),
    .B(_057_),
    .Y(_059_)
  );
  NOR _166_ (
    .A(_058_),
    .B(_059_),
    .Y(_060_)
  );
  NOR _167_ (
    .A(_032_),
    .B(_060_),
    .Y(data_out_1[4])
  );
  NAND _168_ (
    .A(data_in_3[3]),
    .B(pop_p3),
    .Y(_061_)
  );
  NAND _169_ (
    .A(data_in_2[3]),
    .B(pop_p2),
    .Y(_062_)
  );
  NAND _170_ (
    .A(data_in_0[3]),
    .B(pop_p0),
    .Y(_063_)
  );
  NAND _171_ (
    .A(data_in_1[3]),
    .B(pop_p1),
    .Y(_064_)
  );
  NAND _172_ (
    .A(_061_),
    .B(_063_),
    .Y(_065_)
  );
  NAND _173_ (
    .A(_062_),
    .B(_064_),
    .Y(_066_)
  );
  NOR _174_ (
    .A(_065_),
    .B(_066_),
    .Y(_067_)
  );
  NOR _175_ (
    .A(_032_),
    .B(_067_),
    .Y(data_out_1[3])
  );
  NAND _176_ (
    .A(data_in_3[2]),
    .B(pop_p3),
    .Y(_068_)
  );
  NAND _177_ (
    .A(data_in_1[2]),
    .B(pop_p1),
    .Y(_069_)
  );
  NAND _178_ (
    .A(data_in_0[2]),
    .B(pop_p0),
    .Y(_070_)
  );
  NAND _179_ (
    .A(data_in_2[2]),
    .B(pop_p2),
    .Y(_071_)
  );
  NAND _180_ (
    .A(_068_),
    .B(_070_),
    .Y(_072_)
  );
  NAND _181_ (
    .A(_069_),
    .B(_071_),
    .Y(_073_)
  );
  NOR _182_ (
    .A(_072_),
    .B(_073_),
    .Y(_074_)
  );
  NOR _183_ (
    .A(_032_),
    .B(_074_),
    .Y(data_out_1[2])
  );
  NAND _184_ (
    .A(data_in_3[1]),
    .B(pop_p3),
    .Y(_075_)
  );
  NAND _185_ (
    .A(data_in_2[1]),
    .B(pop_p2),
    .Y(_076_)
  );
  NAND _186_ (
    .A(data_in_0[1]),
    .B(pop_p0),
    .Y(_077_)
  );
  NAND _187_ (
    .A(data_in_1[1]),
    .B(pop_p1),
    .Y(_078_)
  );
  NAND _188_ (
    .A(_075_),
    .B(_077_),
    .Y(_079_)
  );
  NAND _189_ (
    .A(_076_),
    .B(_078_),
    .Y(_080_)
  );
  NOR _190_ (
    .A(_079_),
    .B(_080_),
    .Y(_081_)
  );
  NOR _191_ (
    .A(_032_),
    .B(_081_),
    .Y(data_out_1[1])
  );
  NAND _192_ (
    .A(data_in_3[0]),
    .B(pop_p3),
    .Y(_082_)
  );
  NAND _193_ (
    .A(data_in_1[0]),
    .B(pop_p1),
    .Y(_083_)
  );
  NAND _194_ (
    .A(data_in_0[0]),
    .B(pop_p0),
    .Y(_084_)
  );
  NAND _195_ (
    .A(data_in_2[0]),
    .B(pop_p2),
    .Y(_085_)
  );
  NAND _196_ (
    .A(_082_),
    .B(_084_),
    .Y(_086_)
  );
  NAND _197_ (
    .A(_083_),
    .B(_085_),
    .Y(_087_)
  );
  NOR _198_ (
    .A(_086_),
    .B(_087_),
    .Y(_088_)
  );
  NOR _199_ (
    .A(_032_),
    .B(_088_),
    .Y(data_out_1[0])
  );
  NAND _200_ (
    .A(_019_),
    .B(_031_),
    .Y(_089_)
  );
  NOT _201_ (
    .A(_089_),
    .Y(data_out_2[9])
  );
  NOR _202_ (
    .A(_039_),
    .B(_089_),
    .Y(data_out_2[7])
  );
  NOR _203_ (
    .A(_046_),
    .B(_089_),
    .Y(data_out_2[6])
  );
  NOR _204_ (
    .A(_053_),
    .B(_089_),
    .Y(data_out_2[5])
  );
  NOR _205_ (
    .A(_060_),
    .B(_089_),
    .Y(data_out_2[4])
  );
  NOR _206_ (
    .A(_067_),
    .B(_089_),
    .Y(data_out_2[3])
  );
  NOR _207_ (
    .A(_074_),
    .B(_089_),
    .Y(data_out_2[2])
  );
  NOR _208_ (
    .A(_081_),
    .B(_089_),
    .Y(data_out_2[1])
  );
  NOR _209_ (
    .A(_088_),
    .B(_089_),
    .Y(data_out_2[0])
  );
  NAND _210_ (
    .A(_020_),
    .B(_031_),
    .Y(_090_)
  );
  NOT _211_ (
    .A(_090_),
    .Y(data_out_3[8])
  );
  NOR _212_ (
    .A(_039_),
    .B(_090_),
    .Y(data_out_3[7])
  );
  NOR _213_ (
    .A(_046_),
    .B(_090_),
    .Y(data_out_3[6])
  );
  NOR _214_ (
    .A(_053_),
    .B(_090_),
    .Y(data_out_3[5])
  );
  NOR _215_ (
    .A(_060_),
    .B(_090_),
    .Y(data_out_3[4])
  );
  NOR _216_ (
    .A(_067_),
    .B(_090_),
    .Y(data_out_3[3])
  );
  NOR _217_ (
    .A(_074_),
    .B(_090_),
    .Y(data_out_3[2])
  );
  NOR _218_ (
    .A(_081_),
    .B(_090_),
    .Y(data_out_3[1])
  );
  NOR _219_ (
    .A(_088_),
    .B(_090_),
    .Y(data_out_3[0])
  );
  NAND _220_ (
    .A(_019_),
    .B(_030_),
    .Y(_091_)
  );
  NOR _221_ (
    .A(_039_),
    .B(_091_),
    .Y(data_out_0[7])
  );
  NOR _222_ (
    .A(_046_),
    .B(_091_),
    .Y(data_out_0[6])
  );
  NOR _223_ (
    .A(_053_),
    .B(_091_),
    .Y(data_out_0[5])
  );
  NOR _224_ (
    .A(_060_),
    .B(_091_),
    .Y(data_out_0[4])
  );
  NOR _225_ (
    .A(_067_),
    .B(_091_),
    .Y(data_out_0[3])
  );
  NOR _226_ (
    .A(_074_),
    .B(_091_),
    .Y(data_out_0[2])
  );
  NOR _227_ (
    .A(_081_),
    .B(_091_),
    .Y(data_out_0[1])
  );
  NOR _228_ (
    .A(_088_),
    .B(_091_),
    .Y(data_out_0[0])
  );
  NAND _229_ (
    .A(empty_p3),
    .B(_001_),
    .Y(_092_)
  );
  NAND _230_ (
    .A(_005_),
    .B(_092_),
    .Y(_093_)
  );
  NOR _231_ (
    .A(_091_),
    .B(_093_),
    .Y(push_p0)
  );
  NOT _232_ (
    .A(_090_),
    .Y(data_out_3[9])
  );
  NOT _233_ (
    .A(_090_),
    .Y(push_p3)
  );
  NOT _234_ (
    .A(_089_),
    .Y(push_p2)
  );
  NOT _235_ (
    .A(_032_),
    .Y(push_p1)
  );
  assign data_out_0[9:8] = 2'h0;
  assign data_out_1[9] = 1'h0;
  assign data_out_2[8] = 1'h0;
endmodule
