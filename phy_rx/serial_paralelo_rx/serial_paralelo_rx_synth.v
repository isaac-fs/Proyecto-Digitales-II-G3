/* Generated by Yosys 0.9 (git sha1 1979e0b) */

(* top =  1  *)
(* src = "serial_paralelo_rx.v:1" *)
module serial_paralelo_rx_synth(sp_out, valid_out_sp, active, data_in, clk_4f, clk_32f);
  (* src = "serial_paralelo_rx.v:18" *)
  wire [2:0] _000_;
  (* src = "serial_paralelo_rx.v:13" *)
  wire [2:0] _001_;
  (* src = "serial_paralelo_rx.v:13" *)
  wire [7:0] _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  (* init = 3'h0 *)
  (* src = "serial_paralelo_rx.v:11" *)
  reg [2:0] BCcounter = 3'h0;
  (* src = "serial_paralelo_rx.v:4" *)
  output active;
  (* src = "serial_paralelo_rx.v:7" *)
  input clk_32f;
  (* src = "serial_paralelo_rx.v:6" *)
  input clk_4f;
  (* init = 3'h0 *)
  (* src = "serial_paralelo_rx.v:10" *)
  reg [2:0] counter = 3'h0;
  (* src = "serial_paralelo_rx.v:5" *)
  input data_in;
  (* init = 8'h00 *)
  (* src = "serial_paralelo_rx.v:9" *)
  reg [7:0] serial_in = 8'h00;
  (* src = "serial_paralelo_rx.v:2" *)
  output [7:0] sp_out;
  reg [7:0] sp_out;
  (* src = "serial_paralelo_rx.v:3" *)
  output valid_out_sp;
  NOT _074_ (
    .A(BCcounter[2]),
    .Y(_023_)
  );
  NOT _075_ (
    .A(BCcounter[1]),
    .Y(_024_)
  );
  NOT _076_ (
    .A(BCcounter[0]),
    .Y(_025_)
  );
  NOT _077_ (
    .A(counter[2]),
    .Y(_026_)
  );
  NOT _078_ (
    .A(counter[1]),
    .Y(_027_)
  );
  NOT _079_ (
    .A(counter[0]),
    .Y(_001_[0])
  );
  NOT _080_ (
    .A(sp_out[4]),
    .Y(_028_)
  );
  NAND _081_ (
    .A(counter[1]),
    .B(counter[0]),
    .Y(_029_)
  );
  NOT _082_ (
    .A(_029_),
    .Y(_030_)
  );
  NOR _083_ (
    .A(counter[2]),
    .B(_029_),
    .Y(_031_)
  );
  NAND _084_ (
    .A(_026_),
    .B(_030_),
    .Y(_032_)
  );
  NAND _085_ (
    .A(counter[2]),
    .B(_029_),
    .Y(_033_)
  );
  NAND _086_ (
    .A(_032_),
    .B(_033_),
    .Y(_001_[2])
  );
  NAND _087_ (
    .A(_027_),
    .B(counter[0]),
    .Y(_034_)
  );
  NOT _088_ (
    .A(_034_),
    .Y(_035_)
  );
  NAND _089_ (
    .A(counter[1]),
    .B(_001_[0]),
    .Y(_036_)
  );
  NOT _090_ (
    .A(_036_),
    .Y(_037_)
  );
  NAND _091_ (
    .A(_034_),
    .B(_036_),
    .Y(_001_[1])
  );
  NOR _092_ (
    .A(serial_in[1]),
    .B(serial_in[0]),
    .Y(_038_)
  );
  NAND _093_ (
    .A(serial_in[7]),
    .B(_038_),
    .Y(_039_)
  );
  NOR _094_ (
    .A(BCcounter[2]),
    .B(serial_in[6]),
    .Y(_040_)
  );
  NAND _095_ (
    .A(serial_in[5]),
    .B(serial_in[4]),
    .Y(_041_)
  );
  NAND _096_ (
    .A(serial_in[3]),
    .B(serial_in[2]),
    .Y(_042_)
  );
  NOR _097_ (
    .A(_041_),
    .B(_042_),
    .Y(_043_)
  );
  NAND _098_ (
    .A(_040_),
    .B(_043_),
    .Y(_044_)
  );
  NOR _099_ (
    .A(_039_),
    .B(_044_),
    .Y(_045_)
  );
  NOT _100_ (
    .A(_045_),
    .Y(_046_)
  );
  NOR _101_ (
    .A(_025_),
    .B(_046_),
    .Y(_047_)
  );
  NAND _102_ (
    .A(BCcounter[0]),
    .B(_045_),
    .Y(_048_)
  );
  NOR _103_ (
    .A(_024_),
    .B(_048_),
    .Y(_049_)
  );
  NAND _104_ (
    .A(BCcounter[1]),
    .B(_047_),
    .Y(_050_)
  );
  NOR _105_ (
    .A(BCcounter[1]),
    .B(_047_),
    .Y(_051_)
  );
  NOR _106_ (
    .A(_049_),
    .B(_051_),
    .Y(_000_[1])
  );
  NOR _107_ (
    .A(BCcounter[0]),
    .B(_045_),
    .Y(_052_)
  );
  NOR _108_ (
    .A(_047_),
    .B(_052_),
    .Y(_000_[0])
  );
  NOR _109_ (
    .A(sp_out[1]),
    .B(sp_out[0]),
    .Y(_053_)
  );
  NAND _110_ (
    .A(sp_out[5]),
    .B(sp_out[3]),
    .Y(_054_)
  );
  NAND _111_ (
    .A(sp_out[2]),
    .B(sp_out[7]),
    .Y(_055_)
  );
  NOT _112_ (
    .A(_055_),
    .Y(_056_)
  );
  NOR _113_ (
    .A(sp_out[6]),
    .B(_028_),
    .Y(_057_)
  );
  NAND _114_ (
    .A(_056_),
    .B(_057_),
    .Y(_058_)
  );
  NOR _115_ (
    .A(_054_),
    .B(_058_),
    .Y(_059_)
  );
  NAND _116_ (
    .A(_053_),
    .B(_059_),
    .Y(_060_)
  );
  NAND _117_ (
    .A(BCcounter[2]),
    .B(_060_),
    .Y(_061_)
  );
  NOT _118_ (
    .A(_061_),
    .Y(valid_out_sp)
  );
  NAND _119_ (
    .A(_023_),
    .B(_050_),
    .Y(_000_[2])
  );
  NOR _120_ (
    .A(counter[1]),
    .B(counter[0]),
    .Y(_062_)
  );
  NOT _121_ (
    .A(_062_),
    .Y(_063_)
  );
  NOR _122_ (
    .A(counter[2]),
    .B(_063_),
    .Y(_064_)
  );
  NAND _123_ (
    .A(_026_),
    .B(_062_),
    .Y(_065_)
  );
  NAND _124_ (
    .A(data_in),
    .B(_064_),
    .Y(_066_)
  );
  NAND _125_ (
    .A(serial_in[7]),
    .B(_065_),
    .Y(_067_)
  );
  NAND _126_ (
    .A(_066_),
    .B(_067_),
    .Y(_002_[7])
  );
  NOR _127_ (
    .A(counter[2]),
    .B(_034_),
    .Y(_068_)
  );
  NOT _128_ (
    .A(_068_),
    .Y(_069_)
  );
  NAND _129_ (
    .A(data_in),
    .B(_068_),
    .Y(_070_)
  );
  NAND _130_ (
    .A(serial_in[6]),
    .B(_069_),
    .Y(_071_)
  );
  NAND _131_ (
    .A(_070_),
    .B(_071_),
    .Y(_002_[6])
  );
  NOR _132_ (
    .A(counter[2]),
    .B(_036_),
    .Y(_072_)
  );
  NOT _133_ (
    .A(_072_),
    .Y(_073_)
  );
  NAND _134_ (
    .A(data_in),
    .B(_072_),
    .Y(_003_)
  );
  NAND _135_ (
    .A(serial_in[5]),
    .B(_073_),
    .Y(_004_)
  );
  NAND _136_ (
    .A(_003_),
    .B(_004_),
    .Y(_002_[5])
  );
  NAND _137_ (
    .A(data_in),
    .B(_031_),
    .Y(_005_)
  );
  NAND _138_ (
    .A(serial_in[4]),
    .B(_032_),
    .Y(_006_)
  );
  NAND _139_ (
    .A(_005_),
    .B(_006_),
    .Y(_002_[4])
  );
  NAND _140_ (
    .A(counter[2]),
    .B(_062_),
    .Y(_007_)
  );
  NOT _141_ (
    .A(_007_),
    .Y(_008_)
  );
  NAND _142_ (
    .A(data_in),
    .B(_008_),
    .Y(_009_)
  );
  NAND _143_ (
    .A(serial_in[3]),
    .B(_007_),
    .Y(_010_)
  );
  NAND _144_ (
    .A(_009_),
    .B(_010_),
    .Y(_002_[3])
  );
  NOR _145_ (
    .A(_026_),
    .B(_034_),
    .Y(_011_)
  );
  NAND _146_ (
    .A(counter[2]),
    .B(_035_),
    .Y(_012_)
  );
  NAND _147_ (
    .A(data_in),
    .B(_011_),
    .Y(_013_)
  );
  NAND _148_ (
    .A(serial_in[2]),
    .B(_012_),
    .Y(_014_)
  );
  NAND _149_ (
    .A(_013_),
    .B(_014_),
    .Y(_002_[2])
  );
  NOR _150_ (
    .A(_026_),
    .B(_036_),
    .Y(_015_)
  );
  NAND _151_ (
    .A(counter[2]),
    .B(_037_),
    .Y(_016_)
  );
  NAND _152_ (
    .A(data_in),
    .B(_015_),
    .Y(_017_)
  );
  NAND _153_ (
    .A(serial_in[1]),
    .B(_016_),
    .Y(_018_)
  );
  NAND _154_ (
    .A(_017_),
    .B(_018_),
    .Y(_002_[1])
  );
  NOR _155_ (
    .A(_026_),
    .B(_029_),
    .Y(_019_)
  );
  NAND _156_ (
    .A(counter[2]),
    .B(_030_),
    .Y(_020_)
  );
  NAND _157_ (
    .A(data_in),
    .B(_019_),
    .Y(_021_)
  );
  NAND _158_ (
    .A(serial_in[0]),
    .B(_020_),
    .Y(_022_)
  );
  NAND _159_ (
    .A(_021_),
    .B(_022_),
    .Y(_002_[0])
  );
  BUF _160_ (
    .A(BCcounter[2]),
    .Y(active)
  );
  (* src = "serial_paralelo_rx.v:18" *)
  always @(posedge clk_4f)
      BCcounter[0] <= _000_[0];
  (* src = "serial_paralelo_rx.v:18" *)
  always @(posedge clk_4f)
      BCcounter[1] <= _000_[1];
  (* src = "serial_paralelo_rx.v:18" *)
  always @(posedge clk_4f)
      BCcounter[2] <= _000_[2];
  (* src = "serial_paralelo_rx.v:18" *)
  always @(posedge clk_4f)
      sp_out[0] <= serial_in[0];
  (* src = "serial_paralelo_rx.v:18" *)
  always @(posedge clk_4f)
      sp_out[1] <= serial_in[1];
  (* src = "serial_paralelo_rx.v:18" *)
  always @(posedge clk_4f)
      sp_out[2] <= serial_in[2];
  (* src = "serial_paralelo_rx.v:18" *)
  always @(posedge clk_4f)
      sp_out[3] <= serial_in[3];
  (* src = "serial_paralelo_rx.v:18" *)
  always @(posedge clk_4f)
      sp_out[4] <= serial_in[4];
  (* src = "serial_paralelo_rx.v:18" *)
  always @(posedge clk_4f)
      sp_out[5] <= serial_in[5];
  (* src = "serial_paralelo_rx.v:18" *)
  always @(posedge clk_4f)
      sp_out[6] <= serial_in[6];
  (* src = "serial_paralelo_rx.v:18" *)
  always @(posedge clk_4f)
      sp_out[7] <= serial_in[7];
  (* src = "serial_paralelo_rx.v:13" *)
  always @(posedge clk_32f)
      serial_in[0] <= _002_[0];
  (* src = "serial_paralelo_rx.v:13" *)
  always @(posedge clk_32f)
      serial_in[1] <= _002_[1];
  (* src = "serial_paralelo_rx.v:13" *)
  always @(posedge clk_32f)
      serial_in[2] <= _002_[2];
  (* src = "serial_paralelo_rx.v:13" *)
  always @(posedge clk_32f)
      serial_in[3] <= _002_[3];
  (* src = "serial_paralelo_rx.v:13" *)
  always @(posedge clk_32f)
      serial_in[4] <= _002_[4];
  (* src = "serial_paralelo_rx.v:13" *)
  always @(posedge clk_32f)
      serial_in[5] <= _002_[5];
  (* src = "serial_paralelo_rx.v:13" *)
  always @(posedge clk_32f)
      serial_in[6] <= _002_[6];
  (* src = "serial_paralelo_rx.v:13" *)
  always @(posedge clk_32f)
      serial_in[7] <= _002_[7];
  (* src = "serial_paralelo_rx.v:13" *)
  always @(posedge clk_32f)
      counter[0] <= _001_[0];
  (* src = "serial_paralelo_rx.v:13" *)
  always @(posedge clk_32f)
      counter[1] <= _001_[1];
  (* src = "serial_paralelo_rx.v:13" *)
  always @(posedge clk_32f)
      counter[2] <= _001_[2];
endmodule
